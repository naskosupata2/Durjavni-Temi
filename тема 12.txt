                                                        Конкурентно програмиране Тема-12


1-Конкурентност е свойство на система или програма да може да изпълнява едновременно множество задачи или процеси, като се използват общи ресурси.

Процес е програма, която се изпълнява в операционната система и има собствено адресно пространство, стек, контекст и ресурси. Процесите могат да бъдат конкурентни и да се изпълняват паралелно.

Блокираща операция е операция, която блокира изпълнението на процеса, докато не се изпълни определено условие или не се освободят необходимите ресурси.

Нишка е лек процес, който се изпълнява в рамките на главния процес и споделя същото адресно пространство и ресурси. Нишките могат да бъдат конкурентни и да се изпълняват паралелно, като се използва мулти-нишково програмиране.
Тези понятия са основни за разбирането на конкурентното програмиране и проектирането на многонишкови приложения.

2-Блокиращи операции в програмирането се наричат операции, които блокират изпълнението на програмата, докато не бъде изпълнено определено условие. Примери за блокиращи операции са:

Четене от файл - ако програмата чете от файл и файла все още не е готов, операцията ще блокира изпълнението на програмата, докато файла стане достъпен.

Очакване на вход от потребител - ако програмата очаква вход от потребителя и потребителят все още не е въвел вход, операцията ще блокира изпълнението на програмата.

Изчакване на мрежова операция - ако програмата изпраща заявка към мрежов ресурс и не получава отговор, операцията ще блокира изпълнението на програмата, докато не получи отговор от мрежовия ресурс.

Изчакване на сигнал от хардуерно устройство - ако програмата очаква сигнал от хардуерно устройство, операцията ще блокира изпълнението на програмата, докато не получи сигнала от устройството.

3-Работата с нишки (threads) и асинхронни операции (asynchronous operations) може да се сблъскаме с няколко проблема:

Състояние на споделени ресурси: Ако няколко нишки или асинхронни операции имат достъп до споделен ресурс (например променлива), може да се получи конфликт и нежелани резултати. Решението е да се използва механизъм за синхронизация, който да гарантира, че само една нишка или операция има достъп до ресурса в даден момент.

Гъста конкуренция: Ако има много нишки или асинхронни операции, които се борят за ресурси, може да се получи голяма конкуренция и намаляване на производителността. Решението е да се използва оптимизиран алгоритъм или да се раздели задачата на по-малки части.

Грешки при синхронизация: Ако синхронизацията не е правилно извършена, може да се получи deadlock, livelock или друга грешка. Решението е да се използва правилна и безопасна синхронизация.

Сложност на програмиране: Работата с нишки и асинхронни операции може да увеличи сложността на програмирането. Решението е да се използват правилни абстракции и библиотеки, които да улеснят работата.

В общи линии, работата с нишки и асинхронни операции е мощен инструмент, който може да подобри производителността и ефективността на приложението, но трябва да се имат предвид проблемите и да се използват правилни решения.

4-Процесът е изпълним програмен модул, който се изпълнява в рамките на операционната система. Всяка нишка е част от процеса и представлява отделен поток на изпълнение, който може да изпълнява инструкции паралелно с други нишки в рамките на същия процес.

Нишките могат да споделят памет и ресурси в рамките на процеса, което позволява по-ефективно използване на ресурсите на системата и по-лесно споделяне на информация между нишките. Освен това нишките могат да бъдат създадени и унищожени по-бързо от процесите, което прави използването им по-ефективно в ситуации, където трябва да се изпълнят множество едновременни задачи.

Въпреки това, работата с нишки може да бъде по-сложна от работата с процеси, тъй като нишките споделят обща памет и ресурси, което може да доведе до проблеми със синхронизацията и конфликти между нишките. Освен това, една блокираща операция в една нишка може да блокира и целия процес, а не само нишката, което може да намали ефективността на системата.

В общи линии, използването на нишки може да бъде по-ефективно от използването на процеси в определени ситуации, но изисква по-голяма внимателност и опит от страна на програмиста, за да се избегнат проблеми със синхронизацията и конфликтите между нишките.

5-За да създадем нишка в Python, можем да използваме модула threading. В следващия пример ще създадем две нишки, които ще отпечатат числата от 1 до 5 и от 6 до 10 съответно:

import threading

def print_numbers(start, end):
    for i in range(start, end+1):
        print(i)

t1 = threading.Thread(target=print_numbers, args=(1, 5))
t2 = threading.Thread(target=print_numbers, args=(6, 10))

t1.start()
t2.start()

t1.join()
t2.join()

В този пример създаваме две нишки чрез класа Thread, като за всяка нишка задаваме функцията, която искаме да изпълни (print_numbers) и аргументите й (start и end). След това стартираме нишките с start() и ги чакаме да приключат с join().

Този код ще отпечата числата от 1 до 10, но може да бъде изпълнен в произволен ред, тъй като нишките се изпълняват паралелно и не знаем коя ще завърши първа. Това може да доведе до проблеми, ако нишките се опитат да работят върху общи ресурси, като например променливи. В такива случаи трябва да се използват механизми за синхронизация, като например блокировки.

6-Синхронизацията между нишки е важна за предотвратяване на конфликти и грешки, които могат да възникнат, когато няколко нишки се опитват да достъпят и променят едни и същи данни. Ето някои от начините за синхронизация на нишките:

Мютекси (mutexes): това са примитиви за синхронизация, които се използват за защита на споделени ресурси. Мютексът се заключва от една нишка, която иска да използва споделения ресурс, и се отключва, когато тя го освободи.

Семафори (semaphores): това са сигнални механизми, които позволяват на няколко нишки да достъпват един и същ ресурс. Семафорите могат да бъдат използвани за ограничаване на броя на нишките, които могат да достъпват даден ресурс.

Условни променливи (conditional variables): това са механизми, които позволяват на нишките да изчакват на определено събитие или условие, преди да продължат изпълнението си. Условните променливи са полезни за синхронизиране на нишки, които чакат на вход/изход, обработка на данни и др.

Блокиращи опашки (blocking queues): това са опашки, които блокират нишката, когато тя се опитва да вземе елемент от празна опашка. Това позволява на нишката да изчака, докато друга нишка добави елемент в опашката.

Контролирани достъпи до паметта (controlled access to memory): това е метод за синхронизация, който се използва, когато се работи със споделена памет. Контролираните достъпи до паметта позволяват на нишките да достъпват паметта само в определен момент от времето и да я освобождават, когато са готови.

7-Асинхронните операции са начин за изпълнение на задачи във фонов режим, без да блокират изпълнението на главния процес или нишка. Те работят като заявки, които се изпращат към определен източник, като например база данни, мрежово устройство или файлова система. Вместо да чака заявката да приключи преди да продължи с изпълнението на други задачи, главният процес или нишка продължава напред, като се абонира за уведомление, когато заявката завърши.

Асинхронните операции могат да бъдат реализирани с помощта на различни технологии като калбек функции, Promise, async/await и др. Те предлагат ефективен начин за изпълнение на задачи, които изискват дълготрайна обработка или комуникация с външни източници. Като такива, те се използват широко в мрежовите приложения, уеб услуги, мултимедийни приложения и др.

Един от главните предизвикателства при работа с асинхронни операции е синхронизацията на данните. Поради това е важно да се избере правилната технология и да се има предвид начина на използване на асинхронните операции, за да се избегнат проблеми като грешки във веригата от обещания (Promise chain) и грешки при синхронизация на общи ресурси.

8-Обещанието (Promise) е обект, който представлява стойност, която може да бъде налична в момента или в бъдеще. Това е механизъм за обработка на асинхронни операции, който позволява да се дефинират действия, които да се извършат след завършване на операцията.

Обратното извикване (Callback) е функция, която се предава като аргумент на друга функция и се извиква, когато тя завърши своето изпълнение. Това е механизъм за обработка на асинхронни операции, който позволява да се дефинират действия, които да се извършат след завършване на операцията.

И двата механизма са използвани за обработка на асинхронни операции в много езици за програмиране, като JavaScript, Python, Java, C# и други.

9-Като пример за асинхронна операция можем да използваме заявка към уеб API, която може да отнеме време да се изпълни. За да изпълним такава операция асинхронно, можем да използваме Promise в JavaScript.

Ето примерен код:

// Създаване на Promise, който изпълнява заявка към уеб API
const promise = new Promise((resolve, reject) => {
  const request = new XMLHttpRequest();
  request.open('GET', 'https://jsonplaceholder.typicode.com/todos/1');

  request.onload = () => {
    if (request.status === 200) {
      resolve(request.responseText);
    } else {
      reject(Error(request.statusText));
    }
  };

  request.onerror = () => {
    reject(Error('Network Error'));
  };

  request.send();
});

// Изпълнение на Promise
promise.then(response => {
  console.log(response);
}).catch(error => {
  console.log(error);
});

В този пример Promise създава заявка към уеб API и изчаква отговора. Когато отговорът бъде получен, resolve функцията ще се изпълни с отговора като аргумент. Ако се получи грешка, reject функцията ще се изпълни с грешката като аргумент.

След като Promise е създаден, можем да използваме методите .then() и .catch() за да обработим отговора или грешката съответно. Тези методи са асинхронни и ще изчакат Promise да завърши преди да продължат изпълнението си.
