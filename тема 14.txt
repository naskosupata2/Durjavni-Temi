                                                        Тема 14
                                                 ИНТЕРНЕТ ПРОГРАМИРАНЕ
                     
          1. Обяснява предназначението и диференцира различните протоколи.
  -IP е протокол за комуникация, който стои в основата на интернет. Предназначението на протокола е
   да позволи адресация на информацията, която се изпраща по мрежата.На всеки хост в мрежата се дава
   уникален адрес (наречен IP адрес). Когато се изпраща информация през мрежата, тя се разделя на малки пакети,
   наречени IP пакети. Към всеки пакет се прикрепя тъй наречено хедър, който съдържа IP адреса на подателя и получателя и 
   други служебни данни. С помощта на тези адреси компютрите, през които минава пакетът, решават какво да правят с него.

  -TCP е мрежов протокол за управление на обмена на информация, един от основните, използвани в интернет. Използвайки TCP,
   приложенията в мрежата могат да създават връзки (connections) едно с друго и чрез тях да обменят данни в пакети.
   Образно казано, информацията, която трябва да бъде транспортирана, бива разделена на огромно множество от пакети,
   всеки от които съдържа достатъчно информация да бъде пренасочен към точната си дестинация. Надеждността на обмена
   се осигурява от контролни суми и сравнения между изпратените и пристигналите данни. Другата важна функция на
   протокола е да провери, че пакетите биват подредени в правилен ред по времето на пристигането си.

   Протоколът се използва съвместно с IP протокола, като обикновено ги наричат TCP/IP комплект от протоколи.

  -UDP е минимален транспортен пакетен протокол. В семейството от TCP/IP протоколи UDP предоставя прост интерфейс
   между мрежовия протокол под него и приложните протоколи над него. UDP не гарантира доставката на данните:
   не се пази информация за изпратено съобщение

         2.Дефинира понятието HTTP заявка, прави изводи за различните HTTP методи и избира метод за конкретна ситуация.

  -Браузъра изпраща HTTP заявка, която съдържа информация за търсения ресурс. Тази заявка изисква от сървъра да
   върне някакъв HTTP отговор, който в повечето случаи се състои от търсените ресурси.
  HEAD – иска изпращане на заглавията отговарящи на посочения с URL ресурс. Отговорът на сървъра е идентичен с този
         на GET, но е с липсващо тяло. По този начин може да се вземе само метаинформацията, свързана с ресурса,
         спестявайки трансфера на целия файл.
  GET – с него клиентът прави заявка за ресурс, зададен чрез URL. Могат да се изпращат и ограничено количество данни,
        закодирани директно в самия URL
  POST – позволява клиентът да изпрати данни на сървъра. Тази заявка обикновено се генерира при изпращането на
         уеб формуляр, а данните могат да бъдат: текст, написан от потребителя във формуляра;
         файл на клиентския компютър и др.
  PUT – качва файл, който в бъдеще ще отговаря на посочения URL.
  DELETE – изтрива посочения ресурс.
  TRACE – сървърът връща получената заявка със статус OK. Позволява да се провери в какъв вид пристига заявката
          при сървъра и дали и как е била модифицирана по трасето от междинни прокси сървъри.
  OPTIONS – сървърът трябва да отговори с поддържаните от него клиентски методи, съответстващи на зададения URL,
            или с поддържаните от сървъра методи като цяло, ако е зададено * вместо URL.
  CONNECT – използва се при комуникация през прокси.
          
         3.Обяснява и представя графично клиент-сървърната комуникация.
  Клиент – сървър е тип мрежова архитектура, която отделя клиента от сървъра и най-често се използва в компютърни мрежи.
  Всеки клиент или сървър, свързан с мрежата, може също така да бъде използван като възел.
  Най-елементарната типова клиент – сървър архитектура се състои от две части – от едната страна е сървърът,
  от другата страна е клиентът. Постигането на определен резултат при използване винаги е свързано с комуникация между
  двете страни.

  ГРАФИКА-                               клиенти
                                         клиенти - интернет - сервер
                                         клиенти

  4.Различава смисъла на употребата и необходимостта от HTML, CSS и JavaScript. 

  -Структурата на CSS стила включва названието на елемента, за който ще се приложи стилово правило и след това самите
   параметри, които се ограждат в големи скоби – { }.
  -Практически на всеки таг в HTML – например p, h1, h2 и т.н(!!!). – може да се зададат някакви стилови параметри.
   HTML таговете, за които се задават параметрите, се наричат в CSS селектори, а кодът, поставен в големите скоби се
   нарича стилово правило и се състои от свойства и зададените им стойности.
  -javaScript - Поддържа обектно ориентиран и функционален стил на програмиране. Най-често се прилага към HTML кода на
   интернет страница с цел добавяне на функционалност и зареждане на данни. Може да се ползва също за писане на сървърни
   скриптове JSON, както и за много други приложения.

  5.Дефинира и използва коректно HTML тагове.

  <b> или <strong> таг
  Удебелява текста.

  <i> или <em> таг
  Задава курсив/наклон на текста.

  <u> таг
  Подчертава текста.

  <sub> таг 
  Дефинира текст под черта.

  <sup> таг
  Дефинира текст над черта.

  <del> таг
  Указва изтрит текст.

  <br> таг
  Указва нов ред. Няма таг за край.

  <blockquote> таг
  Указва част от текста, който е цитат.

  <mark> таг
  За отбелязване на текст, като му се променя фона.

  <a> таг
  Указва линк към друга страница.

  <img> таг
  Дефинира картинка в HTML страницата. Има два задължителни атрибута: 
  src и alt. Атрибутът src указва URL адреса на картинката, alt – указва алтернативен текст на картинката,
  а hight и width – указват съответно височината и ширината на картинката в пиксели.

  6. Задава свойства на HTML компонентите чрез CSS. 

    Чрез CSS свойствата може да се манипулира вида на текста в една HTML страница. Контролът на презентацията на текста
    чрез CSS се извършва със следните свойства и съответните им стойности.

	font-family
	Задава шрифт на текста. Възможните му стойности са названието на един или няколко шрифта, отделени със запетаи.
	
	font-size
	Задава големина на текста. Възможните му стойности са цифрови – в пиксели (px) или точки (pt)

	font-weight
	Задава удебеляване или „изтъняване“ на текста.

	text-align
	Задава позиционирането на текста в страницата.

	color
	Задава цвят на текста. Възможните му стойности са цветове, описани чрез 16-тичната бройна система,
	чрез английските им названия или чрез задаване на RGB стойност.

	background-color
	Задава цвят за фон на текста. Възможните му стойности са цветове, описани чрез 16-тичната бройна система,
	чрез английските им названия или чрез RGB стойност

	text-decoration
	Задава допълнителен ефект (украса) на текста.

	letter-spacing
	Задава разстояние между буквите на текста.

	word-spacing
	Задава разстояние между думите в текста.

	white-space
	Задава дали текста да бъде показан точно както е написан в текстовия редактор, т.е. дали да се покажат всички
	„спейсове“ и „ентери“

	text-indent
	Оставя разстояние между лявата страна на страницата и началото на текста от първия ред на абзаца.

	text-transform
	Задава на текста главни или малки букви.

	direction
	Задава посоката, в която тече текста.


      7.Описва и демонстрира употребата на семантични елементи за създаване на семантична страница.



      8.Обяснява и демонстрира начините за създаване на адаптивен (responsive) дизайн.

       Едно от нещата за които трябва да се уверим е сайта да излиза добре за различните устройства като например
       за телефон, таблет, компютър или лаптоп
       
       След като структурата на всяка страница от уеб сайта е проектирана (най-често се изготвят wireframes)
       Използването на програми от типа на GZIP за компресиране ресурсите на страниците,
       за да бъдат по-лесно предаването им по мрежите е препоръчително.
	
	Отървете се от несъществено съдържание.


     9.Работа с обекти и събития в JavaScript. Ученикът пише код и модифицира съществуващ такъв спрямо конкретна задача.


	

     10.Демонстрира манипулирането на DOM.

	ДОМ е платформа и езиково свободен интерфейс който третира XML или HTML документи като структура тип (дърво)
	   







