                                                   Представяне на обекти от реалния свят с програмен код Тема-3


1-В програмирането клас е шаблон за обекти, който описва данните, които съдържат обектите, и операциите, които могат да се извършват с тях.

Конструкторът е специален метод на класа, който се използва за създаване на нови обекти. Той се изпълнява автоматично, когато се създаде нов обект от този клас и се използва за инициализиране на полетата на обекта.

Полето е променлива в класа, която съдържа данни за обекта.

Свойството е специален метод на класа, който позволява достъп до полетата на обекта, като предоставя допълнителна функционалност като валидация на входни данни и преобразуване на данните.

В C# класовете, конструкторите, полетата и свойствата се дефинират по следния начин:

public class MyClass // дефиниране на класа
{
    private int myField; // дефиниране на поле
    
    public MyClass(int value) // дефиниране на конструктор с параметър
    {
        myField = value;
    }
    
    public int MyProperty // дефиниране на свойство
    {
        get { return myField; }
        set { myField = value; }
    }
}
Този клас има едно поле myField, което е инициализирано чрез конструктора, който приема стойност за myField. Той също има едно свойство MyProperty, което позволява достъп до myField, като предоставя методи за четене (get) и запис (set) на стойности.

Създаването на обекти от клас е процесът на задаване на конкретни стойности на полетата на класа и създаване на инстанция на този клас. Обектите се създават чрез използване на ключовата дума "new", следвана от името на класа и аргументи, подадени на конструктора на класа (ако има такъв).

Например, ако имаме следния клас "Person":

public class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
}

Можем да създадем обект от този клас като използваме следния код:

Person person = new Person();
person.Name = "John";
person.Age = 25;

В този пример създаваме нов обект от класа "Person" и му присвояваме стойности на полетата "Name" и "Age". След това можем да работим с този обект, използвайки го в различни операции и методи.

Конструкторът е метод, който се изпълнява при създаване на нов обект от даден клас и служи за инициализиране на полетата на този обект. Методът е функция, която се прилага върху обект от даден клас и извършва определени действия. Свойството е механизъм за достъп до стойността на поле на обект, който позволява контролиран и безопасен достъп до тези стойности.

2-Функциите/методите са блокове от код, които могат да бъдат извикани многократно в програмата, за да се извършат определени задачи.

Типът на връщане определя каква стойност ще бъде върната след изпълнението на функцията/метода.

Параметрите на функциите/методите са данни, които се предават като аргументи при извикването им, за да се изпълни определената операция.

Видовете параметри на функция/метод са:

Позиционни параметри - те се подреждат по реда на извикване и могат да бъдат зададени по подразбиране.

Именовани параметри - те се задават с конкретното име и стойност, независимо от реда на подаване.

Параметри с променлив брой аргументи - те позволяват на функцията/метода да приема произволен брой аргументи.

Пример за дефиниране и употреба на функция в C#:

public static int AddNumbers(int num1, int num2)
{
    int result = num1 + num2;
    return result;
}

// извикване на функцията
int sum = AddNumbers(5, 7);
Console.WriteLine(sum); // ще изведе 12

В този пример функцията AddNumbers приема два параметъра num1 и num2 и връща тяхната сума. Тя се извиква със стойности 5 и 7 и резултатът се запазва в променливата sum, която се извежда на екрана.

3-Ключовата дума this се използва в програмирането за достъп до полетата и методите на обекта, върху който е извикана текущата функция или метод.

Най-често this се използва за различаване на локална променлива от поле на класа със същото име. Това е често срещано в конструкторите на класове, когато има нужда да се зададат стойности на полетата на класа.

Например, ако имаме клас Person с поле name и конструктор, който приема параметър name, можем да използваме ключовата дума this, за да уточним, че имаме предвид полето на класа, а не локалната променлива:

public class Person {
   private string name;
 
   public Person(string name) {
      this.name = name;
   }
}
Ключовата дума this може да бъде полезна и при извикване на методи от други методи на същия обект, за да се ясни, че методът се извиква върху текущия обект:

public void Method1() {
   this.Method2();
}
 
public void Method2() {
   // do something
}
В заключение, употребата на ключовата дума this е полезна при избягване на конфликти между имената на полетата и локалните променливи, както и при извикване на методи от текущия обект.

4-Енкапсулирането в програмирането е механизъмът за скриване на детайлите на имплементацията на дадена функционалност на класа, като се предоставят интерфейси за взаимодействие с тези функционалности. Това позволява по-добра защита на данните, както и по-голяма гъвкавост в имплементацията на класовете. Методите за достъп и промяна на енкапсулираните данни, наричани и "getters" и "setters", осигуряват контрол върху начина, по който потребителите могат да достъпват и променят данните в класа.
Например, ако имаме клас Person с поле за име, можем да дефинираме getter метод за името, който ще върне текущата стойност на полето, и setter метод за името, който ще задава нова стойност на полето, след като направи необходимите проверки. Това дава възможност за контрол върху данните, които се пазят в класа и предпазва от нежелани промени на тези данни от външни източници.

Модификаторите за достъп в програмирането определят какво може да бъде достъпвано от други части на програмата. В контекста на енкапсулацията на данни в класове, модификаторите за достъп могат да бъдат използвани за ограничаване на достъпа до полета, свойства и методи, така че те да не могат да бъдат достъпвани и модифицирани директно от други части на програмата.

Обикновено се използват следните модификатори за достъп в C#:

public: даден елемент е достъпен от всяка част на програмата.
private: даден елемент е достъпен само в рамките на класа, в който е деклариран.
protected: даден елемент е достъпен в рамките на класа, в който е деклариран, както и от производните класове.
internal: даден елемент е достъпен само в рамките на текущия проект.
protected internal: даден елемент е достъпен в рамките на текущия проект и от производните класове, дори и да не са в същия проект.
За да бъде спазена правилната енкапсулация на данните, обикновено се използва модификаторът за достъп "private" за полетата на класа, които се използват само в рамките на класа. Свойствата и методите на класа също могат да бъдат декларирани като "private", ако не се изисква достъп до тях от други части на програмата. В тези случаи, за да се достъпват или модифицират енкапсулираните данни, се използват методи за достъп (getters) и методи за промяна (setters), които са декларирани като "public" и които извършват проверки на данните преди да ги върнат или запишат.

5-Статичен клас е клас, който съдържа само статични методи, свойства и полета. Това означава, че не може да се създаде обект от статичен клас и всички членове му могат да се достъпват директно, без да е нужно да се създава инстанция на класа.

Статичните членове на класа са методи, свойства и полета, които са общи за всички инстанции на класа и могат да бъдат достъпвани директно чрез името на класа, без да е нужно да се създава обект от класа.

Един от примерите за употребата на статични членове в клас е да се използват за запазване на обща информация за всички инстанции на класа. Например, може да има статично поле, което брои броя на инстанциите на класа, като всеки път, когато се създаде нова инстанция, стойността на това поле се увеличава. Това може да бъде полезно за наблюдаване на работата на програмата или за използване на обща информация, която е достъпна за всички инстанции на класа.

Пример за статично поле в клас:

public class ExampleClass
{
    private static int instanceCount = 0;
    
    public ExampleClass()
    {
        instanceCount++;
    }
    
    public static int GetInstanceCount()
    {
        return instanceCount;
    }
}
В този пример, всеки път, когато се създаде нова инстанция на ExampleClass, стойността на статичното поле instanceCount се увеличава. Методът GetInstanceCount връща броя на създадените инстанции на класа. Тъй като instanceCount е статично поле, то е общо за всички инстанции на ExampleClass и може да бъде достъпвано директно чрез името на класа, както е показано в метода GetInstanceCount.

6-По-сложните класове са такива, които съдържат повече от една променлива и методи за работа с тях. Те могат да имат по-сложни конструктори, да наследяват други класове, да реализират интерфейси и да имат статични и константни членове.

Модификаторите за достъп позволяват контролиран достъп до членовете на класа. Те се разделят на три вида: public, private и protected. Public членовете могат да бъдат достъпвани от всички части на програмата, private - само от методите на същия клас, а protected - от методите на класа и от наследниците му.

За да създадем по-сложен клас с правилна енкапсулация на членовете, трябва да използваме подходящите модификатори за достъп за всяка променлива и метод, в зависимост от това какъв е нужният достъп до тях. След това можем да създадем конструктори за инициализация на променливите и методи за работа с тях, като се внимава да не се нарушава правилната енкапсулация на данните.

Ето пример за по-сложен клас с правилна енкапсулация:

public class Person
{
    private string name;
    private int age;

    public Person(string name, int age)
    {
        this.name = name;
        this.age = age;
    }

    public string GetName()
    {
        return this.name;
    }

    public void SetName(string name)
    {
        this.name = name;
    }

    public int GetAge()
    {
        return this.age;
    }

    public void SetAge(int age)
    {
        this.age = age;
    }
}
В този пример имаме клас "Person", който има две променливи - "name" и "age". Те са private, за да не могат да бъдат достъпени директно от други класове. Вместо това имаме методи "GetName", "SetName", "GetAge" и "SetAge", които позволяват да се достъпят и променят стойностите на тези променливи. Конструкторът на класа се използва за инициализация на тези променливи при създаване на нов обект от класа.

