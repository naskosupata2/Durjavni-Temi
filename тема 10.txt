                                                        Операционни системи Тема-10


1-Компютърната система е съставена от множество хардуерни компоненти, като някои от тях са:

Процесор - това е "мозъка" на компютъра, който извършва операции и изчисления. Процесорът може да има различен брой ядра и скорост на работа.

Памет - съхранява данни и програмен код, който компютърът използва в момента на работа. Паметта може да бъде различна по капацитет и скорост на работа.

Твърд диск - съхранява постоянно данни и програмен код, които не са в момента на работа. Твърдият диск може да бъде различен по капацитет и скорост на четене/запис.

Видеокарта - извършва графичните изчисления и изобразява графичния интерфейс на компютъра. Видеокартата може да бъде различна по памет и производителност.

Мрежова карта - осигурява връзка с интернет и други компютри в мрежата. Мрежовата карта може да бъде различна по скорост на работа и възможности за безжична връзка.

За да разберем повече за тези компоненти, можем да изследваме техните технически характеристики и да ги сравняваме в зависимост от нуждите на конкретната система, която ще създаваме или използваме.

2-Операционната система е програмен продукт, който управлява хардуерните ресурси на компютърната система и предоставя услуги на приложни програми. Обикновено операционната система е структурирана във вид на слоеве, като всеки слой предоставя различни услуги на слоя, който е над него.

Монолитната архитектура е традиционният начин за структуриране на операционните системи. В тази архитектура, всички компоненти на операционната система са интегрирани в една голяма програма, която се изпълнява в ядрото на операционната система. Това прави монолитната архитектура лесна за разработване, но трудна за поддръжка и модифициране.

Многослойната архитектура е архитектура, която структурира операционната система като множество от слоеве, като всеки слой предоставя определени услуги на надлежащия си слой. Тази архитектура прави операционната система по-модулна и по-лесна за разработване и поддръжка.

Архитектурата с микроядро е архитектура, която изгражда ядрото на операционната система като минимална програма, която предоставя само най-основните услуги, като управление на процесите и управление на паметта. Всички други услуги са изградени като отделни програми, които се изпълняват върху ядрото на операционната система. Това прави архитектурата с микроядро по-безопасна и по-лесна за поддръжка и модифициране.

3-Файловата структура на операционната система има съществено значение за ефективната работа на компютърната система и управлението на файловете.

При конкретна поставена задача, като например търсене на определен файл, е важно да се знае къде този файл може да се намери. В монолитни операционни системи като Windows и Linux, файловата структура е организирана във вид на дървовидна йерархия, където всяка директория може да съдържа под-директории и файлове.

За да се намери определен файл, е нужно да се извършат търсения в съответната директория или в цялата файлова система. За това се използват команди като "dir" или "ls" в командния ред на операционната система или в графичния потребителски интерфейс, като се избере опция за търсене на файлове.

В многослойни операционни системи като MacOS, файловата структура е организирана по различен начин, като в тях има допълнителни слоеве, които могат да се абстрахират и предоставят удобен интерфейс за потребителите. В тези операционни системи търсенето на файлове се извършва чрез Finder приложението, където потребителят може да търси файлове по име, разширение или дата на създаване.

Архитектурата с микроядро, като например QNX, има различен подход към файловата структура, като файловата система е реализирана като драйвер за микроядрото, който се комуникира с други компоненти на системата чрез междупроцесна комуникация. Това осигурява по-голяма стабилност и безопасност на системата.

В заключение, различните операционни системи имат различна файлова структура, която е оптимизирана за конкретни нужди. Познаването на структурата на операционната система е важно за ефективната работа с файловете и за изпълнението на различни задачи

4-Ето някои от най-често използваните команди в операционните системи:

cd - командата cd (change directory) се използва за промяна на текущата директория в командния интерпретатор. Например, за да се преместите в директорията "Documents", можете да напишете командата "cd Documents".

ls - командата ls (list) показва списък с файловете и директориите в текущата директория. Например, "ls" ще покаже списък с всички файлове и директории в текущата директория.

mkdir - командата mkdir (make directory) се използва за създаване на нова директория. Например, "mkdir NewFolder" ще създаде нова директория с име "NewFolder".

rm - командата rm (remove) се използва за изтриване на файлове или директории. Например, "rm MyFile.txt" ще изтрие файл с име "MyFile.txt".

cp - командата cp (copy) се използва за копиране на файлове или директории. Например, "cp MyFile.txt NewFile.txt" ще копира файл с име "MyFile.txt" и ще го запише като "NewFile.txt".

mv - командата mv (move) се използва за преместване на файлове или директории. Например, "mv MyFile.txt NewFolder" ще премести файл с име "MyFile.txt" в директорията "NewFolder".

ps - командата ps (process status) показва списък с активните процеси в операционната система. Например, "ps" ще покаже списък с всички активни процеси.

top - командата top показва реално време на използването на процесора от активните процеси. Това може да помогне за идентифициране на процеси, които използват твърде много ресурси на системата.

Тези команди са само малка част от командите, които може да се използват в операционните системи. Всеки операционна система има свои собствени команди и функционалности.

5-Пакетните системи в операционните системи са софтуерни инструменти, които позволяват лесно инсталиране, актуализиране и управление на софтуерни пакети в системата.

Те осигуряват удобен начин за инсталиране и деинсталиране на софтуер, както и за управление на зависимостите между различните компоненти на софтуерните пакети. Пакетните системи могат да бъдат налични както в команден ред, така и в графични интерфейси.

Най-известните пакетни системи са apt и dpkg за Debian и Ubuntu, yum и rpm за Fedora и CentOS, pacman за Arch Linux и zypper за openSUSE. Тези пакетни системи предоставят лесен начин за управление на софтуерни пакети и за актуализиране на цялата система.

6-Процесите в операционните системи са програмни единици, които се изпълняват върху компютърната система. Те могат да бъдат стартирани от потребителя или автоматично от системата.

Всеки процес има свой контекст на изпълнение, който съдържа информация като кода на процеса, данните му, регистрите и други. Операционната система управлява процесите, като ги пуска, спира, променя приоритета им и др.

Виртуалната памет е механизъм на операционните системи, който дава възможност за използване на повече памет, отколкото има физически налична в системата. Той представлява разделяне на паметта на малки блокове, наречени страница, и прехвърляне на тези страници между физическата памет и дисковото устройство. Това позволява на системата да използва повече памет, отколкото има физически налична, като виртуалната памет е използвана като допълнителна памет за временно запазване на данни.

Възможно е да се даде повече детайли за конкретна операционна система, но общо взето, това са основните концепции на процесите и виртуалната памет.

7-Услугите в операционните системи са програми, които работят във фонов режим и предоставят определени функционалности на потребителите и другите програми. Ето някои от най-често използваните услуги в ОС:

Управление на файловата система - тази услуга предоставя функционалности за управление на файловата система, като създаване, копиране, преместване и триене на файлове и директории.

Мрежови комуникации - тази услуга предоставя възможност за свързване с други компютри в мрежата и обмен на информация между тях.

Управление на процесите - тази услуга осигурява управление на процесите, които работят в операционната система. Това включва създаване, прекъсване, преместване и управление на приоритетите на процесите.

Управление на паметта - тази услуга осигурява управление на паметта, като осигурява свободна памет за нови процеси и премахва неизползваната памет.

Управление на периферни устройства - тази услуга предоставя възможности за управление на периферните устройства, като принтери, скенери, мишки и клавиатури.

За стартиране и спиране на услуга в ОС може да се използва командния ред или да се използва графичен потребителски интерфейс. За стартиране на услуга по график, може да се използва инструмент за планиране на задачи (Task Scheduler в Windows, crontab в Linux). За спиране на услуга по график, може да се използва същият инструмент, като се зададе действие "stop" на съответната услуга.

8-Всички операционни системи използват файлова система, за да организират и управляват данните на съхранение. Въпреки че всички файлови системи имат общи основни концепции, всяка операционна система използва собствена файлова система със свои специфични характеристики.

Например, в Windows операционната система използва NTFS (New Technology File System), който осигурява поддръжка на различни функции, включително управление на правата за достъп, защита на данните и поддръжка на големи файлови системи. В Linux са налични различни файлови системи като ext4, Btrfs, XFS, ZFS и др., като изборът на определена файлова система зависи от нуждите на потребителя.

Така че, когато се избира операционна система, е важно да се има предвид каква файлова система използва и дали тя отговаря на нуждите на потребителя.

9-Shell програмирането е един начин за автоматизиране на различни задачи в операционните системи. Основните оператори в shell програмирането са:

Присвояване на стойност на променлива: този оператор служи за задаване на стойност на променлива. Например:

my_var="Hello, world!"

Извеждане на стойността на променлива: този оператор извежда стойността на определена променлива. Например:

echo $my_var

Условен оператор: този оператор изпълнява определено действие в зависимост от изпълнението на условие. Например:

if [ $var -eq 10 ]
then
  echo "Variable is equal to 10"
fi

Циклични оператори: тези оператори позволяват повтарянето на определени действия. Най-често използваните циклични оператори са for и while. Например:

for i in {1..10}
do
  echo $i
done

Оператори за работа с файлове и директории: тези оператори позволяват манипулация на файлове и директории, като създаване, премахване, преместване и други. Например:

mkdir my_directory
cd my_directory
touch my_file.txt

За създаване на shell скриптове се използва текстов редактор, като например nano или vi. След като се напише скрипта, той може да се изпълни като се използва командата bash или се добави право за изпълнение на файла и се изпълни директно. Например:

nano my_script.sh

# написваме кода на скрипта

bash my_script.sh

# или

chmod +x my_script.sh
./my_script.sh

При създаване на shell скриптове е важно да се внимава при работа с променливи и да се използват кавички при извеждане на стойности, за да се избегнат грешки. Освен това е добре да се използва командата set -e, за да се прекратява изпълнението на скрипта в случай на грешка.

10-Виртуализацията и контейнерите са технологии, които позволяват на потребителите да използват различни операционни системи и приложения на един и същи хост компютър, без да се налага да инсталирате и поддържате отделни физически машини.

Виртуализацията предоставя виртуални машини, които могат да бъдат конфигурирани, монтирани, управлявани и използвани като физически машини. Това позволява на потребителите да използват различни операционни системи върху едно и също желязо, като използват обща хардуерна инфраструктура. Виртуализацията може да бъде полезна за създаване на тестови и разработъчни среди, както и за разпределение на приложения в облака.

Контейнерите са по-лека и по-бърза алтернатива на виртуалните машини. Те предоставят контейнери, които са опаковани в собствената си изолационна среда, съдържаща всички нужни библиотеки и зависимости, за да могат приложенията да работят. Това позволява на приложенията да бъдат по-мобилни и по-лесни за пренасяне между среди. Контейнерите могат да бъдат използвани за развитие и доставка на софтуер в облака, както и за създаване на микросервизи.

Въпреки че и двете технологии са полезни за създаване на изолирани околия, контейнерите са по-подходящи за създаване на малки, по-леки и по-бързи приложения, докато виртуализацията е по-подходяща за създаване на по-големи, по-сложни приложения или за използване в облака.
