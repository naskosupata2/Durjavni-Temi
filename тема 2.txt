                                                            Обработка на колекции от данни Тема-2


1- Сорс-контрол система (СКС) е софтуерен инструмент, който се използва за управление на изходния код на софтуерните проекти и на всички промени, които се правят върху тези проекти. СКС записва и пази историята на всички промени в проекта, като позволява на разработчиците да проследят кой, кога и какво е променил в изходния код, да сравняват различни версии на проекта и да възстановят предишни версии, ако е необходимо. Освен това, СКС улеснява сътрудничеството между разработчиците в екипа, като им позволява да работят по един и същи проект и да споделят своите промени в кода без да ги презаписват. 

Ето няколко от най-често използваните команди за работа със сорс-контрол системите:

clone - копира целия репозиторий от сървъра на разработчика на локалната машина.
init - инициализира нов репозиторий на локалната машина.
add - добавя файлове или директории към индекса за следене на промени в тях.
commit - записва индексираните промени в репозитория като нов комит.
push - качва комит-а от локалния репозиторий в централния репозиторий на сървъра.
pull - изтегля актуалната версия на репозитория от сървъра на локалната машина.
merge - обединява различни версии на един и същи файл или директория, които са били променяни от различни потребители.
branch - създава нова версия на проекта, която е независима от главната версия, като позволява на разработчиците да работят в изолация и да експериментират без да променят главната версия.
checkout - превключва между различни версии на проекта.
status - показва статуса на локалния репозиторий в сравнение с централния репозиторий.

Това са само някои от командите, които се използват за работа със сорс-контрол системите. Всяка система може да има свои собствени команди и начини на работа.

Сорс-контрол системите (СКС) могат да бъдат класифицирани според това дали са централизирани или децентрализирани.

Централизираните СКС се основават на централен репозиторий, който съхранява целия код и контролира достъпа до него. Разработчиците използват клиентски приложения за да се свържат с централния репозиторий, където могат да извличат и качват промени в изходния код. 

Децентрализираните СКС не разчитат на централен репозиторий и дават на всеки разработчик копие на целия репозиторий на локалната му машина. Това дава възможност на разработчиците да работят офлайн и да създават нови клонове на проекта без да влизат в конфликт с главната версия. Разработчиците могат да качват и изтеглят промени помежду си, като синхронизират своите локални репозитории. 

2- Ето един пример за откриване и отстраняване на проблем с помощта на дебъгера в C# Windows Forms приложение:

Създайте нов Windows Forms приложение в Visual Studio и добавете бутон, текстово поле и метка на формата.

Добавете следния код в обработчика на събитието Click на бутона:

private void button1_Click(object sender, EventArgs e)
{
    int num1 = int.Parse(textBox1.Text);
    int num2 = int.Parse(textBox2.Text);
    int result = num1 + num2;
    label1.Text = result.ToString();
}
Този код извлича две числа от текстовите полета на формата и ги сумира, след което резултата се изписва в метката.

Стартирайте приложението и въведете две числа в текстовите полета, след което натиснете бутона. Ако сте въвели валидни числа, ще видите резултата в метката.

Опитайте се да въведете невалидни символи в текстовите полета, например букви. Ще видите, че приложението ще се срине и ще получите грешка.

За да откриете и отстраните проблема, върнете се в кода на обработчика на събитието Click на бутона и добавете следните редове:

private void button1_Click(object sender, EventArgs e)
{
    int num1, num2;
    if (!int.TryParse(textBox1.Text, out num1))
    {
        MessageBox.Show("Invalid value for num1");
        return;
    }
    if (!int.TryParse(textBox2.Text, out num2))
    {
        MessageBox.Show("Invalid value for num2");
        return;
    }
    int result = num1 + num2;
    label1.Text = result.ToString();
}

3-Типовете данни са основна концепция в програмирането и са използвани за определяне на възможните стойности, които могат да бъдат присвоени на променливите. Типовете данни определят и колко памет ще бъде заделена за дадена променлива.

Ето някои от основните типове данни, които се използват в програмирането:

Целочислен тип (int): Този тип се използва за съхранение на цели числа (положителни или отрицателни), които не са дробни. В зависимост от програмния език, този тип може да има различни размери в битове, като най-често използваните размери са 32 или 64 бита.

Символен тип (char): Този тип се използва за съхранение на единичен символ. В повечето програмни езици, този тип се представя с единични кавички (например 'a').

Символен низ (string): Този тип се използва за съхранение на последователности от символи, които могат да образуват текст или дума.

Булев тип (bool): Този тип се използва за съхранение на стойности, които могат да бъдат само истина (true) или лъжа (false). Този тип е особено полезен за управление на логически операции.

Дробен тип (float или double): Тези типове се използват за съхранение на дробни числа. Разликата между двата типа е в точността на съхраняване на числата - double предлага по-голяма точност, но изисква повече памет.

Масиви (arrays): Масивите са структури, които позволяват съхраняването на последователности от еднакви типове данни. Те се използват за съхранение на големи количества от данни, като например списъци с имена на клиенти.

Обекти (objects): Обектът е инстанция на клас в програмирането, който съдържа данни (свойства) и функционалност (методи). Той е основната единица на обектно-ориентираното програмиране (ООП).

Обектите могат да бъдат създадени и манипулирани в програмирането, като се използва клас, който определя характеристиките и поведението на обекта. Тези характеристики и поведение са дефинирани чрез свойства и методи, които са свойства и функции на класа.

Обектите имат две основни характеристики:

Състояние (state): Това са данните, които се съдържат в обекта и могат да бъдат променяни по време на изпълнението на програмата.

Поведение (behavior): Това са методите, които обектът може да извиква и да извършва действия.

Съществуват много видове бройни системи в зависимост от броя на символите, използвани за представяне на числата. Някои от най-известните са:

Двоична система (base 2) - използва два символа 0 и 1.

Десетична система (base 10) - използва десет символа 0, 1, 2, 3, 4, 5, 6, 7, 8 и 9.

Шестнадесетична система (base 16) - използва шестнадесет символа 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E и F.

Осмична система (base 8) - използва осем символа 0, 1, 2, 3, 4, 5, 6 и 7.

Троична система (base 3) - използва три символа 0, 1 и 2.

Петнадесетична система (base 15) - използва петнадесет символа 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E.

Тридесет и шестична система (base 36) - използва тридесет и шест символа 0-9 и A-Z.

Всички тези системи се използват за представяне на числа в различни области, като програмиране, математика, електроника, информатика и др.

Преобразуване на десетично число в двоично число:

Нека имаме десетичното число 27. За да го преобразуваме в двоично число, трябва да го разделим последователно на 2, докато не получим резултат равен на 0. Всяка стъпка ще ни даде остатъка, който трябва да се запише. Затова, 27 (в десетична бройна система) се превръща в 11011 (в двоична бройна система), защото:

27 / 2 = 13, остатък 1
13 / 2 = 6, остатък 1
6 / 2 = 3, остатък 0
3 / 2 = 1, остатък 1
1 / 2 = 0, остатък 1

4- Едномерният масив е масив, който има само един индекс за достъпване на елементите му. Той може да се представи като последователност от елементи, като всеки елемент има индекс, който започва от 0 и се увеличава с 1 за всяка следваща позиция в масива. Например, масивът от цели числа int numbers[5] е едномерен масив, който съдържа 5 цели числа.

Многомерният масив е масив, който има повече от един индекс за достъпване на елементите му. Той може да се представи като матрица, където всеки елемент има два индекса - един за реда и един за колоната, или като куб, където всеки елемент има три индекса - един за дълбочината, един за реда и един за колоната. Например, масивът от цели числа int matrix[3][3] е многомерен масив, който представлява матрица от 3 реда и 3 колони.

Декларирането на масив е начинът да се създаде масив от определен тип в програмата. За да декларираме масив, трябва да посочим неговия тип и размер. Един начин да декларираме масив е да използваме синтаксиса на езика, който използваме.

Едномерен масив, който съдържа буквите на думата "hello":

  +---+---+---+---+---+
  | h | e | l | l | o |
  +---+---+---+---+---+
    0   1   2   3   4
Многомерен масив, който съдържа буквите на думите "hello" и "world":


  +---+---+---+---+---+
  | h | e | l | l | o |
  +---+---+---+---+---+
  | w | o | r | l | d |
  +---+---+---+---+---+
    0   1   2   3   4   <-- Второ измерение
    0   1   2   3   4   <-- Първо измерение
Тук, за да достъпим буквата "o" в думата "world", използваме индекс 1 за първото измерение (втората дума) и индекс 4 за второто измерение (петата буква).

Ето пример за алгоритми, които могат да се приложат върху едномерен масив:

Намиране на минимален и максимален елемент в едномерен масив:

int[] arr = { 2, 5, 1, 8, 4 };
int min = arr[0];
int max = arr[0];

for (int i = 1; i < arr.Length; i++)
{
    if (arr[i] < min)
    {
        min = arr[i];
    }

    if (arr[i] > max)
    {
        max = arr[i];
    }
}

Console.WriteLine($"Min: {min}, Max: {max}");

5-Списъкът е структура от данни, която представлява поредица от елементи, като всеки елемент може да бъде от различен тип. В списъка всеки елемент се нарича връзка (node) и съдържа две информации: стойност (value) и връзка към следващия елемент в списъка.

За деклариране на списъци можем да използваме класовете List или LinkedList в C#, ArrayList в Java или списъци в други програмни езици. Например, в C# можем да декларираме един списък от цели числа по следния начин:

List<int> numbers = new List<int>();
Основните операции, които можем да извършваме върху списъци, включват:

добавяне на елемент (Add)
вмъкване на елемент на определена позиция (Insert)
изтриване на елемент на определена позиция (RemoveAt)
търсене на елемент по стойност (IndexOf)
получаване на броя на елементите в списъка (Count)
обхождане на всички елементи в списъка (foreach)
Предимствата на списъците спрямо масивите са:

Динамичен размер: Списъците могат да бъдат разширявани или свивани динамично, като не е необходимо да се заделя фиксиран брой елементи.
Лесно вмъкване и изтриване: Вмъкването и изтриването на елементи в списък може да бъде извършвано лесно и ефективно.
Удобен за обработка на големи данни: Списъкът позволява обработка на големи данни, като се извършва обработка на един елемент след друг.
Недостатъците на списъците спрямо масивите са:

Несъвместимост с някои операции: Някои операции, които са лесни за масивите, като търсенето на елемент по индекс, могат да бъдат трудни за списъците.
Намалена ефективност: Списъкът може да бъде по-бавен от масива, особено при обработка на малки данни.
По-сложна имплементация: Списъкът има по-сложна имплементация в програмния код от масива.
В заключение, изборът между масиви и списъци зависи от конкретната задача и изискванията за бързодействие и гъвкавост.

6-Символният низ е последователност от символи, която може да бъде интерпретирана като текст. В програмирането, символният низ е тип данни, който позволява работа с текст в програмите. Символните низове могат да бъдат дефинирани чрез еднакви символи, затворени в кавички, като двойни кавички ("това е символен низ") или единични кавички ('това също е символен низ'). Могат да бъдат използвани за съхраняване на текстови данни, като име на потребител, адрес на електронна поща, съобщения и други.

Декларирането на символен низ в програмите може да бъде извършено по различни начини, в зависимост от използвания език за програмиране. Един от най-често използваните начини е чрез дефиниране на променлива от тип "string" (за C#) или "char[]" (за C++), следван от присвояване на стойност на тази променлива.

В C# има вградени методи за работа със символни низове, които могат да бъдат извиквани върху обекти от тип string. Някои от най-използваните методи са:

Length - връща броя на символите в низа.

string str = "Hello, world!";
int length = str.Length; // length ще бъде 13

Substring - връща подниз, започващ от даден индекс и с дадена дължина.

string str = "Hello, world!";
string substr = str.Substring(0, 5); // substr ще бъде "Hello"

IndexOf - връща индекса на първото срещане на даден символ или низ.

string str = "Hello, world!";
int index = str.IndexOf("world"); // index ще бъде 7

Replace - заменя всички срещания на даден символ или низ с друг символ или низ.

string str = "Hello, world!";
string replaced = str.Replace("world", "everyone"); // replaced ще бъде "Hello, everyone!"

ToUpper / ToLower - променят всички букви в низа на главни или малки.

string str = "Hello, world!";
string upper = str.ToUpper(); // upper ще бъде "HELLO, WORLD!"
string lower = str.ToLower(); // lower ще бъде "hello, world!"

Concat - съединява няколко низа в един.

string str1 = "Hello, ";
string str2 = "world!";
string combined = string.Concat(str1, str2); // combined ще бъде "Hello, world!"

Split - разделя низ на поднизове, използвайки даден разделител.

string str = "apple,orange,banana";
string[] parts = str.Split(','); // parts ще бъде ["apple", "orange", "banana"]

Ето няколко примера на програми за обработка на текстови низове с използване на операции за текстови низове в C#:

Програма за извличане на подниз от символен низ:

string text = "Hello, world!";
string subtext = text.Substring(7, 5);
Console.WriteLine(subtext); // извежда "world"

Програма за замяна на низ в символен низ:

string text = "Hello, world!";
string newText = text.Replace("world", "John");
Console.WriteLine(newText); // извежда "Hello, John!"

Програма за превръщане на всички букви в главни или малки:

string text = "Hello, world!";
string upperCaseText = text.ToUpper(); // превръща всички букви в главни
string lowerCaseText = text.ToLower(); // превръща всички букви в малки
Console.WriteLine(upperCaseText); // извежда "HELLO, WORLD!"
Console.WriteLine(lowerCaseText); // извежда "hello, world!"
Програма за проверка дали символен низ съдържа даден подниз:

string text = "Hello, world!";
if (text.Contains("world"))
{
    Console.WriteLine("The text contains 'world'");
}
else
{
    Console.WriteLine("The text does not contain 'world'");
}

7-Понятието речник (dictionary) в програмирането се отнася до структура от данни, която позволява да се асоциират ключове със стойности. Това е основен компонент на много програми и приложения, които изискват бърз достъп до данни.

Устройството на речника включва хеш-таблица, която се използва за ефективно търсене на ключове и свързани с тях стойности. Хеш-таблицата е масив от индексиран елементи, като всеки елемент има свой хеш-код, който се използва за да се определи местоположението му в масива. Ключът на даден елемент също има свой хеш-код, който се използва за да се намери съответният елемент в масива.

Методите за работа с речник включват добавяне на ключове и стойности, търсене на стойности по даден ключ, изтриване на ключове и стойности, проверка на наличието на ключ в речника и други подобни операции.

Примерни методи за работа с речник в C# включват:

Add(key, value) - добавяне на ключ и свързана с него стойност в речника
Remove(key) - изтриване на ключ и свързаната с него стойност от речника
ContainsKey(key) - проверка за наличието на даден ключ в речника
TryGetValue(key, out value) - търсене на стойност по даден ключ в речника, като ако ключът не съществува, се връща стойност по подразбиране
Keys - свойство, което връща колекция от всички ключове в речника
Values - свойство, което връща колекция от всички стойности в речника

В речникът, всеки ключ може да има само една стойност, но различните ключове могат да имат еднакви стойности. Например, две думи могат да имат еднакви дефиниции.