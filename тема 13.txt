                                                    Математически основи на програмирането Тема-13


1-Бройната система е начинът, по който се представят числата с помощта на цифри. Най-често използваните бройни системи са десетична (с база 10), двоична (с база 2), осмична (с база 8) и шестнадесетична (с база 16).

За да преобразуваме число от една бройна система в друга, трябва да следваме определени правила, в зависимост от базата на двете системи. Например, за да преобразуваме число от двоична в десетична, трябва да умножим всяка цифра на двойката на степен, която отговаря на позицията на цифрата отдясно наляво и да съберем резултатите. Например, двоичното число 1011 се преобразува към десетичното число 11, като се извършат следните операции:

1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 1 * 2^0 = 8 + 0 + 2 + 1 = 11

Аналогично, можем да преобразуваме числа от десетична бройна система в други системи, като делим последователно числото на базата на целевата система и записваме остатъците на обратно в реда на получаване им.

За изчисляване на изрази в различни бройни системи можем да използваме същите математически операции, като трябва да следваме правилната приоритетна редица на операциите. Например, можем да изчислим израза 1011 (двоична) + 23 (десетична) в десетична бройна система по следния начин:

1011 + 23 = 11 (двоична) + 23 (десетична) = 11 + 23 = 34 (десетична)

Важно е да обръщаме внимание на базите на числата и да ги преобразуваме в същата база преди да ги събираме или изваждаме.

2-Генерална съвкупност е множеството от всички елементи, които се изучават в едно проучване. Извадка е част от генералната съвкупност, която се избира с цел представяне и изследване на характеристиките на генералната съвкупност.

Средна стойност е аритметичното средно на стойностите на елементите в една съвкупност. Мода е стойността, която се среща най-често в дадена съвкупност. Медианата е средната стойност на елемента в съвкупността, която разделя половината от елементите на по-малки и по-големи от нея.

Графичното представяне на статистически данни може да включва диаграми като хистограми, линейни диаграми, криви на нарастване и спад, криви на правдоподобие и др. Всички тези диаграми могат да бъдат полезни за визуализиране на различни характеристики на данните, като разпределение, нарастване и спад на стойностите и други.

3-Решаването на системи линейни уравнения с повече неизвестни може да се извърши с помощта на компютър, като се използва матрична алгебра. Нека имаме системата от линейни уравнения:

a11x1 + a12x2 + ... + a1nxn = b1
a21x1 + a22x2 + ... + a2nxn = b2
...
am1x1 + am2x2 + ... + amn*xn = bm

Тогава можем да запишем тази система в матричен вид като:

A*x = b

където A е матрицата на коефициентите на неизвестните, x е векторът от неизвестни и b е векторът от свободните членове.

Решаването на тази система може да се извърши като се намерят обратната матрица на A и се умножи с вектора b:

x = A^(-1)*b

Това може да се направи с помощта на софтуерни пакети за матрични изчисления, като например MATLAB, Octave или Python с библиотеки като NumPy или SciPy. В следващия пример ще демонстрираме решаването на система от линейни уравнения с помощта на Python и NumPy.


import numpy as np

# Дефиниране на матрицата на коефициентите
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Дефиниране на вектора от свободните членове
b = np.array([1, 2, 3])

# Решаване на системата
x = np.linalg.inv(A).dot(b)

# Извеждане на резултата
print(x)
Изход:

[-0.23333333  0.46666667 -0.1 ]
Така получаваме векторът от неизвестни x.

4-Функцията е математически обект, който свързва всяко число от даденa множество (наречено област на дефиниция) с точно едно число от друго множество (наречено област на стойността). Това означава, че ако на функцията подадем определен вход, тя ще ни върне изход съгласно правилото, което е зададено.

Свойства на функциите включват:

Област на дефиниция: това е множеството от всички входни стойности, за които функцията е дефинирана.

Област на стойността: това е множеството от всички изходни стойности, които могат да бъдат върнати от функцията.

Нулева точка: това е стойността на входната променлива, за която изходната стойност на функцията е равна на 0.

Монотонност: това е свойството на функцията да нараства или намалява в зависимост от входната стойност.

Отражение: това е свойството на функцията да бъде симетрична относно дадена права или точка.

За да изчертаем графиката на математическа функция можем да използваме специализирани софтуерни приложения за рисуване на графики или програмиране. В програмите можем да въведем математическото израз, да зададем интервал на входните стойности и да посочим разделителната способност на графиката. След това компютърът изчислява стойностите на функцията в определените точки и ги представя на графика.

5-В математиката векторът е наредена последователност от числа, която може да се интерпретира като положение в пространството или като насочен отсечка, която има дължина и посока. В програмирането, векторът е структура от данни, която съдържа елементи от един и същи тип, като се достъпват чрез индексиране.

Свойства на векторите:

Два вектора са равни, ако имат еднаква дължина и съвпадат елементите им;

Векторът има посока, която се определя от насочената отсечка, която представлява;

Векторите могат да се събират и изваждат по компоненти;

Векторът може да се умножава по число, което дава нов вектор със същата посока, но различна дължина;

Векторите могат да се умножават по различни начини - скаларно и векторно произведение, като резултатът е число и вектор, съответно.

В програмирането, векторите могат да се реализират като масиви, където всеки елемент се отнася до определена компонента на вектора, или като специализирани класове/структури в езици като C++, Python, Java, и други. Освен това, съществуват и библиотеки за работа с вектори, като NumPy за Python или Eigen за C++, които предоставят мощни операции за линейна алгебра.

6-Множеството е математически обект, който представлява съвкупност от различни елементи. В едно множество всеки елемент може да се среща най-много веднъж. Операциите с множества включват:

Обединение: Обединението на две множества A и B, обозначено като A ∪ B, е множеството, което съдържа всички елементи, които са част от A или от B или от двете. Графично, обединението на две множества може да се представи като съединяване на две диаграми на Вен, като се включват всички общи и неповтарящи се елементи.

Сечение: Сечението на две множества A и B, обозначено като A ∩ B, е множеството, което съдържа всички елементи, които са едновременно в A и в B. Графично, сечението на две множества може да се представи като оставянето само на общите елементи в две диаграми на Вен.

Разлика: Разликата на две множества A и B, обозначена като A \ B, е множеството, което съдържа всички елементи, които са в A, но не са в B. Графично, разликата на две множества може да се представи като изваждане на множеството B от множеството A в диаграма на Вен.

Допълнение: Допълнението на множеството A спрямо универсалното множество U, обозначено като A', е множеството от всички елементи на U, които не са в A. Графично, допълнението на множество може да се представи като изобразяване на всички елементи в универсалното множество U, които не са част от множеството A.

Декартово произведение: Декартовото произведение на две множества A и B, обозначено като A × B, е множеството от всички възможни наредени двойки (a, b), където a е елемент от A, а b е елемент от B. Графично, декартовото произведение на две множества може да бъде представено като координатна система, където първото множество е по оста X, а второто множество е по оста Y. Точките на графиката са всички възможни комбинации от елементите на двете множества.

Операциите с множества включват обединение, сечение и разлика. Обединението на две множества е множеството от всички елементи, които са част от поне едно от двете множества. Сечението на две множества е множеството от всички елементи, които са част от и двете множества. Разликата между две множества е множеството от всички елементи, които са част от първото множество, но не са част от второто.

Графично, обединението на две множества може да бъде представено като област на графиката, която обхваща всички точки от двете множества. Сечението на две множества е областта на графиката, която съдържа само точките, които принадлежат и на двете множества. Разликата между две множества може да бъде представена като област на графиката, която съдържа точките от първото множество, но не съдържа точките от второто множество.

В програмирането, множествата могат да бъдат представени като масиви или списъци от елементи. Операциите с множества могат да бъдат извършвани чрез цикли или специализирани функции и методи, предоставени от езика за програмиране.

7-Видовете комбинаторни конфигурации са пермутации, комбинации и вариации.

Пермутации представляват всички възможни наредби на елементи от множество. Например, пермутациите на множеството {1, 2, 3} са: {1, 2, 3}, {1, 3, 2}, {2, 1, 3}, {2, 3, 1}, {3, 1, 2}, {3, 2, 1}.

Комбинации представляват избор на определен брой елементи от множество без значение на реда. Например, комбинациите на 2 елемента от множеството {1, 2, 3} са: {1, 2}, {1, 3}, {2, 3}.

Вариации с повторение представляват избор на елементи от множество с повторения и са важни в решаването на някои задачи. Например, ако имаме множество {A, B, C} и искаме да изберем 2 елемента с възможност за повторение, вариациите с повторение са: {A, A}, {A, B}, {A, C}, {B, A}, {B, B}, {B, C}, {C, A}, {C, B}, {C, C}.

Един от начините за генериране на комбинаторни конфигурации е чрез рекурсия. Например, за генериране на всички пермутации на множество можем да използваме следния алгоритъм:

Ако множеството съдържа само един елемент, връщаме множеството.
Взимаме първия елемент от множеството и генерираме всички пермутации на останалите елементи.
За всяка от тези пермутации добавяме първия елемент на различни позиции и добавяме резултата към списъка с пермутациите.
Ето и примерен код на Python за генериране на пермутации чрез рекурсия:

def permutations(nums):
    if len(nums) == 1:
        return [nums]
    result = []
    for i in range(len(nums)):
        first = nums[i]
        rest = nums[:i] + nums[i+1:]
        for permutation in permutations(rest):
            result.append([first] + permutation)
    return result

# Пример:
print(permutations([1, 2, 3]))

8-Пресмятането на вероятности може да бъде реализирано с помощта на различни програмни езици и библиотеки, като един от най-използваните е Python и библиотеката му за вероятностни изчисления - NumPy.

Ето пример за пресмятане на вероятността да се хвърли 6 на заря заедно 10 пъти:

import numpy as np

# Брой хвърляния на зара
n = 10

# Хвърляне на зара n пъти, с възможните резултати от 1 до 6
rolls = np.random.randint(1, 7, size=n)

# Изчисляване на броя на хвърлянията, в които е паднало 6
num_sixes = np.sum(rolls == 6)

# Изчисляване на вероятността за падане на 6 при едно хвърляне
p_one_six = 1/6

# Изчисляване на вероятността за падане на 6 при n хвърляния
p_n_sixes = (1 - (1/6))**n

# Изчисляване на вероятността за поне едно падане на 6 при n хвърляния
p_at_least_one_six = 1 - p_n_sixes

print("Хвърляния: ", rolls)
print("Брой падания на 6: ", num_sixes)
print("Вероятност за едно падане на 6: ", p_one_six)
print("Вероятност за падане на 6 при ", n, " хвърляния: ", p_n_sixes)
print("Вероятност за поне едно падане на 6 при ", n, " хвърляния: ", p_at_least_one_six)
Резултатът от изпълнението на горния код може да изглежда по следния начин:


Хвърляния:  [4 6 4 6 3 3 4 6 4 6]
Брой падания на 6:  4
Вероятност за едно падане на 6:  0.16666666666666666
Вероятност за падане на 6 при  10  хвърляния:  0.10737418240000005
Вероятност за поне едно падане на 6 при  10  хвърляния:  0.8899962866223981
Тук можем да видим, че при 10 хвърля две зарчета вероятността да се получи сума от 7 е около 0.167 или 16.7%, което е доста близо до теоретичната вероятност от 1/6 или около 0.1667.

Един пример за изчисляване на вероятност с помощта на компютър може да бъде симулиране на игра с карти, където трябва да се изчисли вероятността за появата на определена карта в дадена ръка. Създавайки множество от всички възможни комбинации на карти, може да се изчисли броя на комбинациите, в които желаната карта е включена, и след това да се изчисли вероятността като отношение на броя желани комбинации към броя на всички възможни комбинации.