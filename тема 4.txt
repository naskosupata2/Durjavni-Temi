                                                     Обектно-ориентирано програмиране Тема-4


1-Концепцията за типизиране на класове чрез шаблонни класове и методи позволява създаването на гъвкави и преизползваеми класове и методи, които могат да работят с различни типове данни. Шаблонните класове и методи са дефинирани с помощта на шаблонни параметри, които се заместват с конкретни типове при създаването на обектите или извикването на методите.

Един пример за шаблонен клас е класът на векторите, който може да бъде дефиниран така:

template<typename T>
class Vector {
private:
    T* data;
    int size;
public:
    Vector(int size);
    ~Vector();
    T get(int index);
    void set(int index, T value);
    // ...
};

Тук typename T е шаблонният параметър, който може да бъде заместен със конкретен тип данни при създаването на обект от класа.

Също така можем да дефинирам и шаблонни методи, които имат следният синтаксис:

template<typename T>
void swap(T& a, T& b) {
    T temp = a;
    a = b;
    b = temp;
}
Тук шаблонният параметър T е използван за дефиниране на типовете на параметрите на функцията swap.

При извикването на шаблонни класове и методи компилаторът автоматично генерира специализации за конкретните типове данни, които се използват в програмата. Така шаблонните класове и методи предоставят гъвкавост и преизползваемост на кода, като позволяват на програмиста да избере подходящите типове данни в зависимост от конкретната задача.

2-Наследяването на класове е концепция в ООП, при която един клас придобива свойствата и методите на друг клас, който наричаме родителски клас или суперклас. Класът, който придобива свойствата и методите на родителския клас, наричаме наследник или дъщерен клас.

Когато един клас наследява друг клас, той може да използва всички публични и защитени членове на родителския клас, като методи, полета и свойства. Наследникът може да добавя нови членове или да променя поведението на наследените методи чрез презаписване на тяхната имплементация.

За да се използва наследяване в класовете, в декларацията на класа се използва ключовата дума "class" следвана от името на наследник класа, след което се поставя двуеточие и името на родителския клас. Например:

class ChildClass : public ParentClass {
   // тяло на дъщерния клас
};

В този пример, ChildClass е наследник на ParentClass и може да използва всички негови публични и защитени членове.

3-Презаписването (override) на метод в клас означава, че съществува метод със същото име и параметри в базовия клас и в производния клас, но имплементацията на метода в производния клас заменя имплементацията в базовия клас.

Презареждането (overload) на метод в клас означава, че съществуват методи с едно и също име в класа, но с различни параметри. Компилаторът избира подходящия метод за изпълнение в зависимост от типа и броя на аргументите, които са подадени при извикване на метода.

Така презаписването позволява на производния клас да промени имплементацията на метод, който вече съществува в базовия клас, докато презареждането позволява на класа да има методи с едно и също име, но с различни параметри.

4-Принципите на обектно-ориентираното програмиране (ООП) са абстракция, енкапсулация, наследяване и полиморфизъм.

Абстракцията ни позволява да се фокусираме върху важните детайли на системата и да игнорираме ненужните. Когато проектираме класове, трябва да определим техните важни характеристики, като методи и полета, които имат смисъл в контекста на приложението.
Енкапсулацията се отнася до скриването на детайлите на реализацията на един клас от останалите части на приложението. Това се прави, за да се гарантира правилната работа на системата и да се предотвратят нежелани взаимодействия между класовете.
Наследяването ни позволява да създаваме нови класове, които наследяват свойствата и методите на вече съществуващи класове, като при това добавят нова функционалност или променят съществуващата.
Полиморфизмът ни позволява да работим с обекти от различни класове, като използваме общи методи и полета, без да се интересуваме от конкретния клас на даден обект.
Примери за приложение на принципите на ООП са проектирането на софтуер за управление на банкови сметки, софтуер за управление на лекарства в аптека, игри, софтуер за управление на персонала в една фирма и т.н. Всички тези системи използват класове, обекти, методи и полета, които са проектирани с цел постигане на определен функционалност, като при това се спазват принципите на ООП.

5-Абстрактните класове и интерфейсите са ключови концепции в обектно-ориентираното програмиране, които позволяват определянето на общи характеристики и поведения между класове.

Абстрактният клас е клас, който не може да бъде инстанциран директно, а само да се наследява от други класове. Той съдържа една или повече абстрактни методи, които не са имплементирани в абстрактния клас, но се очаква да бъдат реализирани в класовете, които наследяват абстрактния клас. Абстрактните класове се използват, когато има обща функционалност между класовете, но тази функционалност може да бъде различна във всеки от тях.

Интерфейсът е съвкупност от абстрактни методи, които трябва да бъдат имплементирани от класовете, които го реализират. Интерфейсите представят договор между два класа за реализирането на определени методи и/или свойства. Класовете, които реализират даден интерфейс, трябва да имплементират всички негови методи.

Разликата между абстрактния клас и интерфейса е, че абстрактният клас може да има имплементирани методи, докато интерфейсът не може. Освен това един клас може да наследява само един абстрактен клас, но може да имплементира множество интерфейси.

Абстрактните класове и интерфейсите позволяват на програмистите да разделят общата функционалност между класовете, които са взаимно свързани и да гарантират, че класовете, които ги реализират, имат определени методи. Това улеснява разработката на по-големи проекти и подобрява преизползваемостта на кода.

6-Полиморфизмът е концепция в обектно-ориентираното програмиране, която позволява на обекти от различни класове да се държат по един и същи начин. Това означава, че методите на един обект могат да бъдат използвани със същия синтаксис като методите на друг обект, без значение от това от кой клас са.

Видовете полиморфизъм са:

Компилаторен полиморфизъм (или статичен полиморфизъм) - това е полиморфизм, който се постига чрез презареждане на методи (overloading). При този вид полиморфизъм компилаторът решава кой метод да се извика в зависимост от типа на параметрите, подадени при извикването на метода.

Ранно свързване (или методично полиморфизъм) - това е полиморфизм, който се осъществява в момента на компилацията. Това означава, че компилаторът знае кой метод ще бъде извикан предварително.

Късно свързване (или динамичен полиморфизъм) - това е полиморфизм, който се постига в момента на изпълнение на програмата. Това означава, че решението кой метод да се извика се прави по време на изпълнение, в зависимост от реалния тип на обекта, върху който се извиква методът.

Абстрактните класове и интерфейсите също могат да бъдат използвани за постигане на полиморфизъм, като позволяват да се дефинират общи методи или свойства, които се наследяват от други класове и могат да бъдат използвани в полиморфични изрази.