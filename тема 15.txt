                                                            ИНТЕРНЕТ ПРОГРАМИРАНЕ ТЕМА 15


1- MVC е модел за дизайн на софтуерни приложения, който разделя приложението на три основни компонента: Model, View и Controller.

Model (Модел) представлява данните и бизнес логиката, използвани в приложението. Този компонент съхранява данните и определя начина, по който те могат да бъдат манипулирани и обработвани.

View (Изглед) представлява начина, по който данните се визуализират за потребителя. Този компонент се отнася до външния вид и взаимодействието с потребителя, като предоставя интерфейс за визуализация на информацията.

Controller (Контролер) е посредник между Model и View. Той приема заявки от потребителя и изпраща необходимата информация до Model, който след това връща обработените данни обратно на Controller. Този компонент определя логиката на приложението и управлява взаимодействието между Model и View. 


Графично MVC моделът може да се представи по следния начин:

                       +--------+
                       |        |
                       |  View  |
                       |        |
                       +--------+
                             |
                             |
           +-----------------+-----------------+
           |                                   |
           |                                   |
   +--------------+                     +---------------+
   |              |                     |               |
   | Controller   |                     |    Model      |
   |              |                     |               |
   +--------------+                     +---------------+
           |                                   |
           |                                   |
           +-----------------------------------+
                             |
                             |
                       +--------+
                       |        |
                       |  Data  |
                       |        |
                       +--------+


Тук можем да видим, че View и Model са изолирани един от друг и се свързват чрез Controller, който управлява взаимодействието между тях. View се занимава с визуализацията на данните, Model - с обработката на данните, а Controller - с посредничеството между тях. Това позволява да се правят промени във визуализацията на данните, без да се нарушава логиката на приложението и обратното.



2- ORM (Object-Relational Mapping) е технология, която предоставя възможност за работа с релационни бази данни чрез програмен код, като абстрахира директния SQL код и предоставя по-високо ниво на абстракция.

ORM технологиите използват класове, които мапват обекти от програмата в записи в базата данни и обратно. Това позволява програмистите да работят с обекти, като не се налага да се грижат за много от детайлите, свързани с работата с бази данни.

Например, ако имаме клас Employee в нашето приложение, ORM технологията може да му съответства таблица employees в релационната база данни, като всяко свойство на класа съответства на поле в таблицата. ORM технологията може да генерира SQL заявки автоматично за извличане на данни от базата данни в обекти, както и да запише обектите обратно в базата данни, когато се правят промени.

Една от най-популярните ORM технологии за .NET е Entity Framework, която предоставя средства за работа с релационни бази данни чрез LINQ (Language Integrated Query) и обектно-ориентиран код.


Ето пример, който демонстрира използването на Entity Framework в C#, за да се извлекат всички служители от база данни:

using (var context = new EmployeeContext())
{
    var employees = context.Employees.ToList();
    foreach (var employee in employees)
    {
        Console.WriteLine("Employee name: {0}", employee.Name);
    }
}


3- За да реализирате CRUD операции, трябва да имате съответните методи за взаимодействие с базата данни. Това включва методи за създаване, четене, актуализиране и изтриване на записи.

Ето примери на реализация на CRUD операциите в ASP.NET Core с използване на Entity Framework Core.

Създаване на запис:

public async Task CreateAsync(T entity)
{
    await _context.Set<T>().AddAsync(entity);
    await _context.SaveChangesAsync();
}

Четене на запис:

public async Task<T> GetByIdAsync(int id)
{
    return await _context.Set<T>().FindAsync(id);
}

Актуализиране на запис:

public async Task UpdateAsync(T entity)
{
    _context.Entry(entity).State = EntityState.Modified;
    await _context.SaveChangesAsync();
}

Изтриване на запис:

public async Task DeleteAsync(int id)
{
    var entity = await GetByIdAsync(id);
    _context.Set<T>().Remove(entity);
    await _context.SaveChangesAsync();
}

Тези методи могат да бъдат използвани в контролерите за да се реализират CRUD операции за моделите в приложението. Например, за да се изтрие запис на Employee модела, бихте могли да имплементирате следният контролер метод:

public async Task<IActionResult> Delete(int employeeId)
{
    var employee = await _employeeRepository.GetByIdAsync(employeeId);

    if (employee == null)
    {
        return NotFound();
    }

    await _employeeRepository.DeleteAsync(employeeId);

    return RedirectToAction(nameof(Index));
}

Този метод използва GetByIdAsync метода за да намери записа, който искаме да изтрием, и след това използва DeleteAsync метода за да го изтрие от базата данни.


4- Шаблонните изгледи в ASP.NET MVC позволяват да се използват едни и същи HTML елементи и кодове в няколко различни изгледа. Това улеснява поддръжката и оптимизира работата по разработването на приложението.

Ето пример как може да дефинирате шаблонен изглед в ASP.NET MVC:

Създайте нов изглед като файла му дайте името _Layout.cshtml. В този файл ще бъде дефиниран шаблонният код, който ще се използва в различни изгледи.

В _Layout.cshtml можете да дефинирате основната структура на страницата, като например HTML таговете за head, body и т.н.

Вътре в body тага, можете да дефинирате основната структура на страницата, като например header, nav, main, footer и т.н.

Използвайте @RenderBody() метода, за да вмъкнете съдържанието на текущия изглед в шаблонния изглед.

Можете да дефинирате и други @RenderSection методи за вмъкване на допълнителни секции в шаблонния изглед.

Ето пример за съдържание на _Layout.cshtml файл:

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - My ASP.NET Application</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    <div class="container body-content">
        @RenderBody()
    </div>

    <footer>
        <p>&copy; 2023 - My ASP.NET Application</p>
    </footer>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @RenderSection("scripts", required: false)
</body>
</html>


5- Автентикацията и авторизацията са два важни процеса в информационната сигурност и се използват за гарантиране на достъпа до ресурси в система. Въпреки че двата термина често се използват заедно и се отнасят до процесите на удостоверяване на потребителите, те са различни етапи в този процес.

Автентикацията е процесът на проверка на идентичността на потребителя. Това може да стане чрез проверка на потребителско име и парола, използване на биометрични данни или други методи за удостоверяване на потребителската идентичност. Целта на автентикацията е да се гарантира, че потребителят е този, за когото се представя.

Авторизацията, от друга страна, е процесът на определяне на правата за достъп на потребителя до ресурси в системата. Това означава, че след като потребителят е удостоверен, системата трябва да го разреши да извършва определени действия върху ресурсите в системата. Например, определен потребител може да има права да чете, да редактира или да изтрива дадена информация, но да няма право да я създава. Така авторизацията гарантира, че потребителят има правото да изпълнява определени действия в системата.

В съвременните приложения за уеб и мобилни устройства, автентикацията и авторизацията се реализират чрез различни методи, включително потребителски имена и пароли, социални мрежи, единичен вход (SSO), токени и др. ORM технологиите често включват вградена поддръжка на автентикация и авторизация, като позволяват на разработчиците да създават приложения с безопасност от началото до края.


6-Сесиите и бисквитките (cookies) са два различни начина за запазване на информация на клиентската страна в уеб приложенията.

Бисквитките са малки текстови файлове, които се съхраняват на компютъра на потребителя от браузъра и се предават на сървъра във всеки HTTP заявка. Те се използват, за да запазват различни настройки, предпочитания или идентификатори, като например потребителското име и парола за автентикация. Бисквитките могат да бъдат създадени от сървъра или от клиента чрез JavaScript.

Сесиите са механизъм за съхранение на информация за потребителя между няколко заявки към уеб приложението. Вместо да изпращат информацията си във всяка заявка към сървъра, като в случая с бисквитките, данните се съхраняват на сървъра и се свързват с уникален идентификатор за потребителя, наречен сесия. Идентификаторът за сесията се предава на клиента чрез бисквитка или URL параметър и се използва за идентифициране на потребителя в по следващите заявки. Сесиите са по-сигурен начин за съхранение на чувствителна информация, тъй като данните не се изпращат на клиента и са достъпни само на сървъра.

В заключение, бисквитките и сесиите са два различни начина за запазване на информация на клиентската страна в уеб приложенията, като бисквитките се използват за запазване на предпочитанията на потребителя, докато сесиите са по-сигурен начин за съхранение на чувствителна информация.


7- Уеб приложенията са подложени на множество уязвимости в сигурността, които могат да бъдат злоупотребени от "хакери". Някои от най-често срещаните уязвимости включват:

SQL инжекции - това е уязвимост, при която "хакери" могат да използват SQL заявки, за да получат достъп до защитени данни. Например, ако уеб приложението не валидира правилно входните данни на потребителя, хакерът може да изпрати SQL заявка като входни данни, която да промени базата данни.

XSS атаки - това е уязвимост, при която хакери могат да вмъкнат злонамерен код в уеб сайтове, който да се изпълнява на компютрите на потребителите. Например, хакерът може да изпрати злонамерен JavaScript код във формата за коментари на уеб сайт, който да се изпълнява при зареждане на страницата на други потребители.

CSRF атаки - това е уязвимост, при която хакерът може да изпрати злонамерена заявка към уеб сайта от името на потребител, който е в момента логнат в сайта. Например, хакерът може да изпрати заявка към банковия сайт на потребител, за да извърши транзакция от неговата сметка без неговото знание.

Неосигурени сесии - това е уязвимост, при която хакери могат да използват откраднати сесии, за да получат достъп до защитени данни. Например, ако уеб приложението не шифрира сесиите, хакерът може да използва открадната сесия, за да получи достъп до личните данни на потребителя.


8- REST (Representational State Transfer) е архитектурен стил за създаване на уеб услуги. REST API е тип уеб услуга, която използва протокола HTTP за извикване на методи, като GET, POST, PUT и DELETE, за да осъществи определени действия върху ресурси.

Основните принципи на REST API включват:

Основните операции върху ресурси са GET, POST, PUT и DELETE: GET за извличане на информация, POST за създаване на нови ресурси, PUT за обновяване на съществуващи ресурси и DELETE за изтриване на ресурси.

Ресурсите са идентифицирани по уникален URL адрес: всеки ресурс има свой уникален идентификатор, който може да се използва за извикване на определените операции върху него.

Комуникацията е без състояние: REST API не съхранява информация за сесията между заявките на клиента. Вместо това всяка заявка трябва да съдържа достатъчна информация, за да бъде обработена от сървъра.

Използване на стандартни HTTP кодове за отговори: REST API използва стандартни HTTP кодове за отговори като 200 OK, 404 Not Found, 500 Internal Server Error и други, за да предостави информация за състоянието на операцията.

Поддържа формати за обмяна на данни: REST API поддържа различни формати за обмяна на данни, като JSON, XML, YAML и други.

Пример за използване на REST API е търсене на информация за даден продукт. Клиентът изпраща GET заявка към REST API с URL адрес, който идентифицира ресурса, като например "https://api.example.com/products/123". REST API връща информацията за продукта в желания формат за обмяна на данни.

Правилното спазване на основните принципи на REST API може да доведе до по-лесно скалиране, повишена сигурност и по-лесно използване от други клиенти.


9- Ето примерен код на Python за работа с REST API в JSON формат чрез библиотеката requests:

import requests

# Инициализация на URL адреса на REST API
url = "https://jsonplaceholder.typicode.com/posts"

# Инициализация на параметри за извличане на данни
params = {"userId": 1}

# Извличане на данните от REST API в JSON формат
response = requests.get(url, params=params)
data = response.json()

# Извеждане на получените данни
print(data)


Този код използва REST API за JSONPlaceholder, който предоставя няколко крайни точки, съдържащи тестови данни. В горния код адресът на REST API е инициализиран на https://jsonplaceholder.typicode.com/posts. След това се инициализират параметрите за извличане на данни чрез параметъра params. В този случай, са инициализирани така, че да се извлекат всички постове на потребител с ID 1. След това се извиква методът get() на обекта requests, който извлича данните от REST API и ги записва в response. Функцията json() на обекта response се използва за парсване на отговора в JSON формат, който се записва в променливата data. Накрая, данните се извеждат чрез print() функцията.


10- AJAX (Asynchronous JavaScript and XML) е технология за изпращане на заявки към сървъра и получаване на данни в JSON или XML формат, без да е необходимо да се зарежда цялата уеб страница.

Ето примерен код за използване на AJAX с REST API в JSON формат:

// Създаване на обект XMLHttpRequest
var xhr = new XMLHttpRequest();

// Определяне на HTTP метода и URL адреса на REST API заявката
var method = "GET";
var url = "https://example.com/api/data";

xhr.open(method, url, true);

// Определяне на типа на съдържанието, като по този начин заявката ще върне JSON формат
xhr.setRequestHeader("Content-Type", "application/json");

// Обработка на отговора от сървъра
xhr.onreadystatechange = function () {
    if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
        // Преобразуване на получените данни в обект JSON
        var data = JSON.parse(xhr.responseText);

        // Извеждане на данните в HTML елемент
        document.getElementById("data-container").innerHTML = data;
    }
};

// Изпращане на заявката към REST API
xhr.send();

Този код създава AJAX заявка към REST API с GET метод и URL адрес "https://example.com/api/data". След изпращането на заявката, отговорът от сървъра се обработва в функцията onreadystatechange. Ако отговорът е успешен (HTTP статус код 200), данните отговарящи на REST API заявката се преобразуват в обект JSON и се извеждат в HTML елемент с ID "data-container".

За да използвате AJAX заявка с друг HTTP метод, например POST, PUT или DELETE, ще трябва да смените стойността на променливата method и да добавите необходимите данни към заявката, като например xhr.send(JSON.stringify(data)) за изпращане на данни в JSON формат.





