                                                        Бази данни Тема-6


1-Базата данни е организирана колекция от данни, които могат да бъдат достъпни, манипулирани и съхранявани на едно или няколко места. Данните в базата данни са организирани в таблици, които имат колони (полета) и редове (записи).

Типовете данни, които могат да бъдат съхранени в базите данни, са:

Числови типове данни - цели числа, числа с плаваща запетая, дробни числа и т.н.
Символни типове данни - символи, низове от символи и т.н.
Логически типове данни - стойности "true" или "false".
Дата и час - дати, времена или комбинации от тях.
Бинарни данни - изображения, звукови файлове и т.н.
Като допълнение, съществуват и комплексни типове данни, като масиви, списъци, графи и др., които могат да бъдат съхранявани в някои типове бази данни.

2-ако имаме база данни с име "my_database" и искаме да създадем таблица "my_table" с три полета "id", "name" и "age", можем да използваме следната заявка:

CREATE TABLE my_database.my_table (
    id INT PRIMARY KEY,
    name VARCHAR(50),
    age INT
);

Тази заявка ще създаде таблица с име "my_table" в базата данни "my_database" с три полета - "id", "name" и "age". Полето "id" ще бъде зададено като PRIMARY KEY.

За да променим таблица, можем да използваме заявката ALTER TABLE. Например, за да добавим ново поле "email" в таблицата "my_table", можем да използваме следната заявка:

ALTER TABLE my_database.my_table ADD email VARCHAR(50);

Тази заявка ще добави ново поле "email" в таблицата "my_table".

За да изтрием таблица, можем да използваме заявката DROP TABLE. Например, за да изтрием таблицата "my_table", можем да използваме следната заявка:

DROP TABLE my_database.my_table;

Тази заявка ще изтрие таблицата "my_table" от базата данни "my_database".

3-Процесът на нормализация в базите данни е метод за организиране на данните в таблици, като се постига минимизиране на излишните и зависими данни. Нормализацията се използва за подобряване на ефективността и безопасността на базата данни.

Съществуват няколко нормални форми, като всяка следваща нормална форма постига по-голяма степен на нормализация на данните. Най-използваните нормални форми са:

Първа нормална форма (1NF): Всяко поле в таблицата трябва да бъде атомарно, т.е. да не може да съдържа повече от една стойност. Това изключва полета, които съдържат списъци или масиви.

Втора нормална форма (2NF): Таблицата е в 1NF и всеки неключов атрибут е зависим от целия ключ, а не само от част от него.

Трета нормална форма (3NF): Таблицата е в 2NF и няма транзитивни зависимости между атрибутите. Това означава, че ако има зависимост между два неключови атрибута, тя трябва да бъде представена в отделна таблица.

Всяка нормална форма постига по-голяма степен на нормализация на данните и изисква по-строги правила за структуриране на таблиците.

4-В релационните бази данни между таблиците може да има различни типове връзки, които могат да бъдат различени по броя на връзките и ограниченията на тяхната валидност. Някои от типовете връзки в релационните бази данни включват:

Едно към едно (One-to-One) връзка - този тип връзка е когато всяка запис в една таблица е свързана с точно един запис в друга таблица. Този тип връзка е обикновено между две таблиците, които имат сходни или свързани данни, които трябва да бъдат съхранявани в отделни таблиците. Например, може да има таблица с данни за потребителите и таблица с данни за адресите на потребителите.

Едно към много (One-to-Many) връзка - този тип връзка е когато записите в една таблица са свързани с много записи в друга таблица. Това е най-често срещаният тип връзка между две таблиците. Например, може да има таблица с продукти и таблица с поръчки. Всяка поръчка може да включва много продукти, но всеки продукт може да бъде включен само в една поръчка.

Много към много (Many-to-Many) връзка - този тип връзка е когато записите в една таблица могат да бъдат свързани с много записи в друга таблица, и обратно. Този тип връзка изисква допълнителна таблица, наречена "междинна таблица" или "таблица за връзки", която свързва две основни таблица. Например, може да има таблица с потребители и таблица с проекти, като всеки потребител може да работи по много проекти, а всеки проект може да има много потребители.

Інтерактивни (Self-Referencing) връзки - този тип връзка е когато записите в една таблица могат да бъдат свързани с други записи в същата таблица. Например, може да има таблица с категории на продуктите, където всяка категория може да има една или много надкатегории.

5-Каскадните операции са мощно средство за поддържане на цялостността на данните в релационните бази данни. В зависимост от типа на връзката и настройките на каскадните операции, те могат да се използват за автоматично премахване или промяна на свързаните записи при премахване или промяна на родителския запис.

При каскадното премахване, при премахване на запис в родителската таблица, системата автоматично премахва всички свързани записи в дъщерните таблице. Това може да бъде полезно при оптимизацията на операциите по изтриване на данни, но трябва да се използва внимателно, за да не се загубят важни данни.

При каскадната промяна, при промяна на стойност в ключовия стълб на родителската таблица, системата автоматично променя всички свързани стойности в дъщерните таблице. Това може да бъде полезно при промяна на ключови данни, но също така трябва да се използва внимателно, за да не се повредят данни или цялостността на базата данни.

В общи линии, използването на каскадни операции трябва да бъде добре обмислено и да се използва само при необходимост. Те могат да бъдат полезни за автоматизиране на някои операции, но могат да доведат и до грешки или загуба на данни, ако не се използват правилно.

6-Ограниченията (constraints) в релационните бази данни са правила, които се налагат върху данните в таблицата, за да се гарантира цялостността и консистентността на данните. Те са важна част от проектирането на базата данни, за да се осигури правилно съхранение на данните и за да се предотвратят грешки и несъответствия.

Ето някои от най-често използваните ограничения в релационните бази данни:

Primary key constraint - това е ограничение, което определя един уникален идентификатор за всеки ред в таблицата. Това се изпълнява чрез определяне на един или повече полета като primary key. Пример:

CREATE TABLE Students (
   StudentID INT PRIMARY KEY,
   FirstName VARCHAR(50),
   LastName VARCHAR(50),
   Email VARCHAR(50),
   Age INT
);

Foreign key constraint - това е ограничение, което установява връзка между две таблиците чрез полета, които са ключове в едната таблица и са връзани с ключове в другата таблица. Това се използва за установяване на връзки между данните в различни таблиците. Пример:

CREATE TABLE Courses (
   CourseID INT PRIMARY KEY,
   CourseName VARCHAR(50),
   TeacherID INT,
   FOREIGN KEY (TeacherID) REFERENCES Teachers(TeacherID)
);

Unique constraint - това е ограничение, което гарантира, че всички стойности в определено поле са уникални. Пример:

CREATE TABLE Employees (
   EmployeeID INT PRIMARY KEY,
   FirstName VARCHAR(50),
   LastName VARCHAR(50),
   Email VARCHAR(50) UNIQUE,
   Age INT
);

Check constraint - това е ограничение, което гарантира, че стойността в полето отговаря на определени условия. Пример:

CREATE TABLE Customers (
   CustomerID INT PRIMARY KEY,
   FirstName VARCHAR(50),
   LastName VARCHAR(50),
   Email VARCHAR(50),
   Age INT CHECK (Age >= 18)
);

Ограниченията са важни за гарантиране на правилната работа на базата данни и предотвратяване на грешки при въвеждането, редактирането и изтриването на данни.

7-SQL е стандартен език за работа с релационни бази данни. Основните операции в SQL са CRUD (Create, Read, Update, Delete), които са също известни като "изискванията на пълнолетния" за базите данни.

Create (Създаване) - Тази операция се използва за създаване на нови записи в базата данни. За тази операция в SQL се използва командата INSERT INTO. Пример:

INSERT INTO employees (employee_name, employee_salary) VALUES ('John Doe', 50000);

Тази заявка създава нов запис в таблицата "employees" с имена "John Doe" и заплата 50000.

Read (Четене) - Тази операция се използва за четене на данни от базата данни. За тази операция в SQL се използва командата SELECT. Пример:

SELECT employee_name, employee_salary FROM employees WHERE employee_id = 1;

Тази заявка чете името и заплатата на служител с ID 1 от таблицата "employees".

Update (Актуализиране) - Тази операция се използва за актуализиране на записи в базата данни. За тази операция в SQL се използва командата UPDATE. Пример:

UPDATE employees SET employee_salary = 55000 WHERE employee_id = 1;

Тази заявка актуализира заплатата на служител с ID 1 от таблицата "employees" на 55000.

Delete (Изтриване) - Тази операция се използва за изтриване на записи от базата данни. За тази операция в SQL се използва командата DELETE. Пример:

DELETE FROM employees WHERE employee_id = 1;

Тази заявка изтрива записа на служител с ID 1 от таблицата "employees".

Тези основни операции в SQL са много важни при работата с бази данни и се използват често в програмирането на бази данни.

8-Ето пример за създаване на подзаявка в SQL за да извлечем данни за градовете в България:

SELECT city, population
FROM (
    SELECT *
    FROM cities
    WHERE country = 'Bulgaria'
) AS bg_cities
ORDER BY population DESC;

В този пример се използва подзаявка, за да се изберат само редовете от таблицата cities, където стойността в колоната country е "Bulgaria". Резултатът от тази подзаявка се записва като временна таблица с име bg_cities, от която по-нататък се избират и извеждат град и население, подредени в низходящ ред спрямо населението.

9-Обединение (Union) и съединение (Join) са две основни операции за комбиниране на данни в SQL.

Обединението на две множества от резултати от заявки се извършва с оператора UNION. То се използва, когато искаме да комбинираме резултатите на две или повече заявки, като премахнем повтарящите се редове. Обединението връща единичен резултат, който съдържа всички уникални редове от всички комбинирани резултати.

Съединението (Join) се използва за комбиниране на данни от две или повече таблиците на базата данни, като се използват общи колони между тях. То се използва, когато искаме да съчетаем информацията от две или повече таблиците, като съпоставим редовете на тези таблиците, чиято стойност на общите им колони са еднакви. Съединението може да бъде външно, вътрешно, ляво или дясно в зависимост от това каква информация искаме да включим в резултата.

В сравнение с обединението, съединението връща множество от резултати, като тези резултати могат да имат повтарящи се редове, ако има повече от един ред от едната таблица, който отговаря на ред от другата таблица.

10-За да имплементираме групиране на данни в SQL, използваме оператора GROUP BY, който позволява да групираме резултатите на заявката според определено поле. Например, ако искаме да групираме данните от таблица "orders" по поле "customer_id" и да намерим общия брой поръчки за всеки клиент, можем да напишем следната заявка:

SELECT customer_id, COUNT(*) as total_orders
FROM orders
GROUP BY customer_id;

Тази заявка ще групира поръчките по "customer_id" и ще ни даде общия брой поръчки за всеки клиент.

Филтрирането и сортирането на групирани данни става по същия начин като върху обикновените данни. Например, ако искаме да филтрираме групираните данни от предишната заявка и да изберем само клиентите, които имат повече от 10 поръчки, можем да напишем:

SELECT customer_id, COUNT(*) as total_orders
FROM orders
GROUP BY customer_id
HAVING total_orders > 10;

Това ще ни даде само клиентите, които имат повече от 10 поръчки.

За сортиране на групирани данни можем да използваме оператора ORDER BY. Например, ако искаме да сортираме групирания резултат от предишната заявка по брой поръчки в низходящ ред, можем да напишем:

SELECT customer_id, COUNT(*) as total_orders
FROM orders
GROUP BY customer_id
HAVING total_orders > 10
ORDER BY total_orders DESC;

Това ще ни даде клиентите, които имат повече от 10 поръчки, сортирани по брой поръчки в низходящ ред.

11-Функциите, съхранените процедури и транзакциите са три важни компонента на релационните бази данни. Въпреки че тези компоненти могат да бъдат използвани по различен начин, те служат за различни цели.

Функциите са блокове от код, които могат да бъдат извиквани от друг код. Те приемат параметри, изпълняват дадена логика и връщат резултат. Функциите могат да бъдат използвани за обработка на данни и генериране на резултати в базата данни.

Съхранените процедури са сходни на функциите, но имат по-широки функционалности и възможности. Те могат да приемат множество параметри, да връщат множество резултати и да извършват множество операции. Съхранените процедури са полезни за оптимизиране на дълги и сложни заявки, защото могат да бъдат извикани от различни места в базата данни.

Транзакциите са групи от операции, които трябва да бъдат изпълнени като едно цяло. Ако дадена операция в транзакцията срещне проблем, то цялата транзакция се отменя и се връща базата данни в началното състояние преди транзакцията. Транзакциите осигуряват консистентност на данните и се използват за изпълнение на критични операции като вмъкване, редактиране или изтриване на данни.

В заключение, функциите и съхранените процедури служат за обработка на данни и генериране на резултати в базата данни, докато транзакциите осигуряват консистентност и надеждност на данните. Те се използват за различни цели и могат да работят заедно за постигане на по-голяма ефективност и сигурност на базата данни.